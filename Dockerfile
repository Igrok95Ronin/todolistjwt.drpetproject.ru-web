# Используем официальный образ Node.js на базе Alpine в качестве окружения для сборки
FROM node:22-alpine AS builder

# Устанавливаем рабочую директорию внутри контейнера в /app
WORKDIR /app

# Копируем только файлы package*.json, чтобы сначала установить зависимости
# (Это ускоряет сборку, поскольку при неизменных зависимостях слой кешируется)
COPY package*.json ./

# Выполняем установку зависимостей с помощью npm ci
# npm ci гарантирует чистую установку зависимостей строго по package-lock.json
RUN npm ci

# Копируем все остальные файлы проекта в контейнер
COPY . .

# Запускаем сборку React-приложения (вызываем скрипт build, определённый в package.json)
RUN npm run build

# На втором этапе используем лёгкий образ nginx на базе Alpine для раздачи статических файлов
FROM nginx:alpine AS runner

# Устанавливаем bash во второй образ тоже, если требуется доступ к bash внутри контейнера
RUN apk add --no-cache bash

# Удаляем (или переименовываем) дефолтный конфиг nginx, чтобы не мешал
RUN rm /etc/nginx/conf.d/default.conf

# Копируем собственные конфиги nginx из локальной папки ./configs в директорию /etc/nginx/conf.d контейнера
COPY ./configs /etc/nginx/conf.d

# Копируем ранее собранные статические файлы из первого этапа (builder)
# Из директории /app/build в директорию /home второго контейнера
COPY --from=builder /app/dist /home/todolistjwt.drpetprojectweb

# Экспонируем порт 80, чтобы наш сервер был доступен извне по этому порту
EXPOSE 80

# Запускаем nginx в форе форе (daemon off) для работы внутри контейнера
CMD ["nginx", "-g", "daemon off;"]